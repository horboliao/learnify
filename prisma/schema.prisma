// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(uuid()) @map("_id")
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  name          String?
  surname       String?
  bio           String?
  role          UserRole  @default(STUDENT)
  avatar        String?

  accounts       Account[]
  CourseProgress CourseProgress[]
  LessonProgress LessonProgress[]
  AnswerProgress AnswerProgress[]
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum UserRole {
  TUTOR
  STUDENT
}

model CourseProgress {
  id              String           @id @default(uuid()) @map("_id")
  userId          String
  courseId        String
  categoryId      String
  lessonsProgress LessonProgress[]

  lessonCount          Int
  LessonCompletedCount Int     @default(0)
  isCompleted          Boolean @default(false)

  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model LessonProgress {
  id          String           @id @default(uuid()) @map("_id")
  userId      String
  lessonId    String
  isCompleted Boolean          @default(false)
  answers     AnswerProgress[]

  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Lesson           Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  CourseProgress   CourseProgress? @relation(fields: [courseProgressId], references: [id])
  courseProgressId String?
}

model AnswerProgress {
  id           String  @id @default(uuid()) @map("_id")
  userId          String
  answerId     String
  isCorrect    Boolean @default(false)
  points       Int
  pointsScored Int     @default(0)

  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Answer           Answer          @relation(fields: [answerId], references: [id], onDelete: Cascade)
  LessonProgress   LessonProgress? @relation(fields: [lessonProgressId], references: [id])
  lessonProgressId String?
}

model Course {
  id            String  @id @default(uuid()) @map("_id")
  authorId      String
  title         String
  description   String?
  backgroundUrl String?
  price         Float?
  isOpen        Boolean @default(false)

  lessons     Lesson[]
  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category       Category?        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId     String?
  CourseProgress CourseProgress[]
}

model Category {
  id             String           @id @default(uuid()) @map("_id")
  name           String           @unique
  courses        Course[]
  CourseProgress CourseProgress[]
}

model Attachment {
  id   String @id @default(uuid()) @map("_id")
  name String
  url  String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id       String  @id @default(uuid()) @map("_id")
  title    String
  notes    String?
  videoUrl String?
  position Int
  isOpen   Boolean @default(false)
  isFree   Boolean @default(false)

  questions Question[]

  courseId       String
  course         Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  LessonProgress LessonProgress[]
}

model Question {
  id          String  @id @default(uuid()) @map("_id")
  title       String
  weight      Float?  @default(0)
  notes       String?
  explanation String?
  lesson      Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId    String
  position    Int
  isOpen      Boolean @default(false)

  answers Answer[]

  QuestionType QuestionType? @relation(fields: [type], references: [id], onDelete: Cascade)
  type         String?
}

model QuestionType {
  id        String     @id @default("") @map("_id")
  name      String     @unique
  questions Question[]
}

model Answer {
  id             String           @id @default(uuid()) @map("_id")
  title          String
  isCorrect      Boolean?
  position       Int?
  question       Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId     String
  AnswerProgress AnswerProgress[]
}
